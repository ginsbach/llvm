# These are the toplevel constraint specifications.

Export
Constraint GEMM 
( inherits ForNest(N=3)
      with {outer_loop} as {for[0]}
       and {map_loop}   as {for[1]}
       and {dot_loop}   as {for[2]} and
  inherits MatrixStore
      with {outer_loop.iterator} as {col}
       and {map_loop.iterator}   as {row}
       and {outer_loop.begin}    as {begin}
                                 at {output} and
   inherits MatrixRead
      with {outer_loop.iterator} as {col}
       and {dot_loop.iterator}   as {row}
       and {outer_loop.begin}    as {begin}
                                 at {input1} and
  inherits MatrixRead
      with {map_loop.iterator} as {col}
       and {dot_loop.iterator} as {row}
       and {outer_loop.begin}  as {begin}
                               at {input2} and
  inherits DotProductLoopAlphaBeta
      with {outer_loop}     as {scope}
       and {dot_loop}       as {loop}
       and {input1.value}   as {src1}
       and {input2.value}   as {src2}
       and {output.address} as {update_address})
End

Export
Constraint SPMV_CSR
( inherits For at {outer_loop} and
  inherits DotProductFor at {inner_loop} and
  {outer_loop.begin} strictly
      control flow dominates {inner_loop.begin} and
  {outer_loop.end} strictly
      control flow post dominates {inner_loop.end} and
  inherits VectorStore
      with {outer_loop}          as {scope}
       and {outer_loop.iterator} as {input_index}
                                 at {output} and
  inherits VectorRead
      with {outer_loop}          as {scope}
       and {inner_loop.src1}     as {value}
       and {inner_loop.iterator} as {input_index}
                                 at {val} and
  inherits VectorRead
      with {outer_loop}      as {scope}
       and {inner_loop.src2} as {value}
       and {col_ind.value}   as {input_index}
                             at {vector} and
  inherits VectorRead
      with {outer_loop}          as {scope}
       and {inner_loop.iterator} as {input_index}
                                 at {col_ind} and
  inherits ReadRanges
     with {outer_loop}            as {scope}
      and {inner_loop.iter_begin} as {range_begin}
      and {inner_loop.iter_end}   as {range_end}
      and {outer_loop.iterator}   as {input_index}
                                  at {read_range})
End

Export
Constraint SPMV_JDS
( inherits For at {outer_loop} and
  inherits DotProductFor at {inner_loop} and
  {outer_loop.begin} strictly
      control flow dominates {inner_loop.begin} and
  {outer_loop.end} strictly
      control flow post dominates {inner_loop.end} and
  inherits VectorStore
      with {outer_loop} as {scope}
       and {perm.value} as {input_index}
                        at {output} and
  inherits VectorRead
      with {outer_loop}          as {scope}
       and {outer_loop.iterator} as {input_index}
                                 at {perm} and
  inherits VectorRead
      with {outer_loop}      as {scope}
       and {inner_loop.src1} as {value}
       and {tmp1.value}      as {input_index}
                             at {val} and
  inherits Addition
      with {jd_ptr.value}        as {input}
       and {outer_loop.iterator} as {addend}
                                 at {tmp1} and
  inherits VectorRead
      with {outer_loop}          as {scope}
       and {inner_loop.iterator} as {input_index}
                                 at {jd_ptr} and
  inherits VectorRead
      with {outer_loop}      as {scope}
       and {inner_loop.src2} as {value}
       and {col_ind.value}   as {input_index}
                             at {vector} and
  inherits VectorRead
      with {outer_loop} as {scope}
       and {tmp1.value} as {input_index}
                        at {col_ind} and
  inherits VectorRead
      with {outer_loop}          as {scope}
       and {inner_loop.iter_end} as {value}
       and {outer_loop.iterator} as {input_index}
                                 at {tmp2})
End

Constraint ReadRanges
( ( ( {range_end} is load instruction and
      {range_end} reaches phi node {range_begin} from {scope.end} and
      {range_end} is the same as {iter_end_read.value} and
      {iter_begin_read.value} is the same as {iter_end_read.value} and
      {range_begin} strictly control flow dominates {scope.end}) or
    ( {range_begin} is load instruction and
      {range_end} is load instruction and
      {range_begin} is the same as {iter_begin_read.value} and 
      {range_end} is the same as {iter_end_read.value} and
      {range_begin} strictly control flow dominates {scope.end})))
#and
#  inherits VectorRead
#      with {input_index} as {input_index}
#       and {scope}       as {scope} at {iter_begin_read} and
#  inherits VectorRead
#      with {input_index} as {input_index}
#       and {scope} as {scope} at {iter_end_read})
End

# These are some buidling blocks for the toplevel constraints.

Constraint ForNest
( inherits For at {for[i]} for all i=0..N and
  ( ( {for[i].begin} spans block to {for[i+1].precursor} and
      {for[i+1].successor} spans block to {for[i].end} and
      {conditional[i].precursor} is unused and
      {conditional[i].begin} is unused and
      {conditional[i].end} is unused and
      {conditional[i].successor} is unused) or
    ( {for[i].begin} spans block to {conditional[i].precursor} and 
      {conditional[i].precursor} has control flow to {conditional[i].begin} and
      {conditional[i].begin} spans block to {for[i+1].precursor} and
      {for[i+1].successor} spans block to {conditional[i].end} and
      {conditional[i].end} has control flow to {conditional[i].successor} and
      {conditional[i].precursor} has control flow to {conditional[i].successor} and
      {conditional[i].successor} spans block to {for[i].end})) for all i=0..N-1)
End

Constraint DotProductLoopAlphaBeta
( inherits DotProductFor
      with {input1.value} as {src1}
       and {input2.value} as {src2} at {loop} and
  ( ( {loop.initial} is load instruction and
      {update_address} has data flow to {loop.initial}) or
    ( {loop.initial} is floating point zero and
      {update_address} is gep instruction)) and
  ( ( {loop.use_dotvalue} is the same as {raw_final} and
      {conditional[2].end} is unused) or
    ( {loop.use_dotvalue} reaches phi node
          {raw_final} from {conditional[2].end})) and
  {final_value} is first argument of {output.store} and
  inherits Addition with {scaled_reduc} as {input}
                     and {final_value}  as {value}
                     and {scaled_prev}  as {addend} and
  inherits Multiplication with {raw_final}    as {input}
                           and {scaled_reduc} as {value}
                           and {alpha}        as {multiplier} and
  inherits LocalConst with {alpha} as {value} and
  inherits Multiplication with {prev}        as {input}
                           and {scaled_prev} as {value}
                           and {beta}        as {multiplier} and
  inherits LocalConst with {beta} as {value} and
  ( ( {prev} is unused and
      {update_address} is gep instruction) or
    ( {prev} is load instruction and
      {update_address} is first argument of {prev})))
End

Constraint DotProductFor
( inherits For and
  {dotvalue} reaches phi node {prev_dotvalue} from {end} and
  {dotvalue} is fadd instruction and
  inherits ArgumentsPermuted
      with {dotvalue}      as {dst}
       and {prev_dotvalue} as {src1}
       and {dot_addend}    as {src2} and
  {dot_addend} is fmul instruction and
  inherits ArgumentsPermuted with {dot_addend} as {dst} and
  {initial} reaches phi node
      {prev_dotvalue} from {precursor} and
  {dotvalue} has data flow to {use_dotvalue} and
  {successor} control flow dominates {use_dotvalue})
End

Constraint OffsetAdd
( {value} is add instruction and
  inherits ArgumentsPermuted
      with {value}  as {dst}
       and {base}   as {src1}
       and {offset} as {src2} and
  inherits LocalConst
      with {begin} as {scope.begin}
       and {offset} as {value})
End

Constraint RangeCheck
( {value} is icmp instruction and
  inherits ArgumentsPermuted
      with {value} as {dst}
       and {input} as {src1}
       and {limit} as {src2} and
  inherits LocalConst
      with {begin} as {scope.begin}
       and {limit} as {value})
End

Constraint For
( inherits Loop and
  {increment} reaches phi node {iterator} from {end} and
  {increment} is first argument of {comparison} and
  {comparison} is icmp instruction and
  {comparison} is first argument of {end} and
  {increment} is add instruction and
  {iterator} is first argument of {increment} and
  {iter_end} is second argument of {comparison} and
  inherits LocalConst
      with {begin}    as {scope.begin}
       and {iter_end} as {value} and
  {iter_begin} has data flow to {iterator} and
  inherits LocalConst
      with {begin}      as {scope.begin}
       and {iter_begin} as {value} and
  {iter_step} is second argument of {increment} and
  inherits LocalConst
      with {begin}     as {scope.begin}
       and {iter_step} as {value})
End

Constraint MatrixStore
  inherits PermMultidStore(N=2) with {col} as {input[0]} and {row} as {input[1]}
End

Constraint MatrixRead
  inherits PermMultidRead(N=2) with {col} as {input[0]} and {row} as {input[1]}
End

Constraint VectorRead
( {value} is load instruction and
  {address} is first argument of {value} and
  {base_pointer} is first argument of {address} and
  inherits LocalConst
      with {base_pointer} as {value} and
  {final_index} is second argument of {address} and
  ( ( {final_index} is add instruction and
      inherits ArgumentsPermuted
          with {final_index}   as {dst}
           and {strided_index} as {src1}
           and {offset}        as {src2} and
      inherits LocalConst
          with {offset} as {value} and
      {strided_index} is mul instruction and
      inherits ArgumentsPermuted
          with {strided_index} as {dst}
           and {input_index}   as {src1}
           and {stride}        as {src2} and
      inherits LocalConst
          with {stride} as {value}) or 
    ( {final_index} is mul instruction and
      inherits ArgumentsPermuted
          with {final_index} as {dst}
           and {input_index} as {src1}
           and {stride}      as {src2} and
      inherits LocalConst
          with {stride} as {value} and
      {strided_index} is the same as {final_index} and
      {offset} is unused) or 
    ( {final_index} is the same as {input_index} and
      {strided_index} is the same as {final_index} and
      {offset} is unused and
      {stride} is unused and
      {scope.begin} is instruction)))
End

Constraint VectorStore
( {store} is store instruction and
  {address} is second argument of {store} and
  {base_pointer} is first argument of {address} and
  inherits LocalConst
      with {base_pointer} as {value} and
  {final_index} is second argument of {address} and
  ( ( {final_index} is add instruction and
      inherits ArgumentsPermuted
          with {final_index}   as {dst}
           and {strided_index} as {src1}
           and {offset}        as {src2} and
      inherits LocalConst
          with {offset} as {value} and
      {strided_index} is mul instruction and
      inherits ArgumentsPermuted
          with {strided_index} as {dst}
           and {input_index}   as {src1}
           and {stride}        as {src2} and
      inherits LocalConst
          with {stride} as {value}) or 
    ( {final_index} is mul instruction and
      inherits ArgumentsPermuted
          with {final_index} as {dst}
           and {input_index} as {src1}
           and {stride}      as {src2} and
      inherits LocalConst
          with {stride} as {value} and
      {strided_index} is the same as {final_index} and
      {offset} is unused) or 
    ( {final_index} is the same as {input_index} and
      {strided_index} is the same as {final_index} and
      {offset} is unused and
      {stride} is unused and
      {scope.begin} is instruction)))
End

Constraint StencilRead
( {value} is load instruction and
  {address} is first argument of {value} and
  inherits StencilAccess and
  {input_index[i]} is the same as {input[i]} for all i=0..N)
End

Constraint StencilAccess
( inherits AffineAccess with {begin} as {begin} at {read} and
  {read.base_pointer} is the same as {base_pointer} and
  {read.address} is the same as {address} and
  ( {read.input_index[i]} is the same as {index[i].value} and
    inherits Addition at {index[i]} and
    ( {index[i].addend} is a constant or
      {index[i].addend} is unused) and
    {index[i].input} is the same as {input_index[i]}) for all i=0..N)
End

Constraint PermMultidStore
( {store} is store instruction and
  {address} is second argument of {store} and
  inherits AffineAccess and
  inherits Permute with {input_index} as {output})
End

Constraint PermMultidRead
( {value} is load instruction and
  {address} is first argument of {value} and
  inherits AffineAccess and
  inherits Permute with {input_index} as {output})
End

Constraint AffineAccess
( {address} is gep instruction and
  {base_pointer} is first argument of {address} and
  inherits LocalConst with {base_pointer} as {value}
                            and {begin}   as {scope.begin} and
  {output_index} is second argument of {address} and
  {offset_add.value} is the same as {output_index} and
  inherits Addition at {offset_add} and
  inherits LocalConst with {begin} as {scope.begin} and {offset_add.addend} as {value} and
  ( {stride_mul[N-i-1].value} is the same as {index_add[N-i].input} and
    inherits Multiplication at {stride_mul[N-i-1]} and
    inherits LocalConst with {begin} as {scope.begin} and {stride_mul[N-i-1].multiplier} as {value} and
    {index_add[N-i-1].value} is the same as {stride_mul[N-i-1].input} and
    inherits Addition at {index_add[N-i-1]} and
    {input_index[N-i-1]} is the same as {add_input[N-i-1]} and
    ( ( {add_input[N-i-1]} is not the same as {input_index[N-i]} and
        {input_index[N-i-1]} is an integer) or
      ( {input_index[N-i-1]} is the same as {add_input[N-i-1]} and
        {input_index[N-i]} is an integer))) for all i=0..N
                                           with {offset_add.input} as {index_add[N].input}
                                            and {offset_add.value} as {input_index[N]}
                                            and {index_add[0].input}  as {add_input[0]}
                                            and {index_add[1].addend} as {add_input[1]}
                                            and {index_add[2].addend} as {add_input[2]}
                                            and {index_add[3].addend} as {add_input[3]} and
  {base_index} is the same as {index_add[0].addend} and
  inherits LocalConst with {begin} as {scope.begin} and {base_index} as {value})
End

Constraint Addition
( ( {input} is the same as {value} and
    {addend} is unused) or
  ( ( {value} is add instruction or
      {value} is fadd instruction) and
    inherits ArgumentsPermuted with {value}  as {dst}
                                and {input}  as {src1}
                                and {addend} as {src2}) or
  ( ( {value} is sub instruction or
      {value} is fsub instruction) and
    inherits ArgumentsPermuted with {value}  as {dst}
                                and {input}  as {src1}
                                and {addend} as {src2}))
End

Constraint Multiplication
( ( {input} is the same as {value} and
    {multiplier} is unused) or
  ( ( {value} is mul instruction or
      {value} is fmul instruction) and
    inherits ArgumentsPermuted with {value}      as {dst}
                                and {input}      as {src1}
                                and {multiplier} as {src2}) or
  ( {value} is fdiv instruction and
    inherits ArgumentsPermuted with {value} as {dst}
                                and {input} as {src1}
                                and {multiplier} as {src2}))
End

Constraint Permute
if M+1=N then
  {input[M]} is the same as {output[M]}
else
  ( {input[M]} is the same as {output[n]} and
    inherits Permute(N=N,M=M+1) with {output[M]} as {output[n]}
                                and {output[n]} as {output[M]}) for some n=M..N
endif
for M=0 if not otherwise specified
End

Constraint InductionVar
{new_ind} reaches phi node {old_ind} from {end}
End

Constraint Loop
( {end} has control flow to {begin} and
  inherits SESE)
End

Constraint SESE
( {precursor} is branch instruction and
  {precursor} has control flow to {begin} and
  {end} is branch instruction and
  {end} has control flow to {successor} and
  {begin} control flow dominates {end} and
  {end} control flow post dominates {begin} and
  {precursor} strictly control flow dominates {begin} and
  {successor} strictly control flow post dominates {end} and
  all control flow from {begin} to {precursor}
         passes through {end} and
  all control flow from {successor} to {end}
         passes through {begin})
End

Constraint LocalConst
( ( {scope.begin} is instruction and
    {value} is preexecution) or
  {value} strictly control flow dominates {scope.begin} or
  ( {scope.begin} is instruction and
    {value} is unused))
End

#Constraint LocalConst
#( ( {scope.begin} is instruction and
#    {value} is preexecution) or
#  {value} strictly control flow dominates {scope.begin})
#End

Constraint ArgumentsPermuted
( ( {src1} is first  argument of {dst} and
    {src2} is second argument of {dst}) or
  ( {src2} is first  argument of {dst} and
    {src1} is second argument of {dst}))
End

Constraint Concat
( if N1=1 then
    {out[0]} is the same as {in1}
  else
    {out[i]} is the same as {in1[i]} for all i=0..N1
  endif and
  if N2=1 then
    {out[N1+0]} is the same as {in2}
  else
    {out[N1+i]} is the same as {in2[i]} for all i=0..N1
  endif and
  if N3=1 then
    {out[N1+N2+0]} is the same as {in3}
  else
    {out[N1+N2+i]} is the same as {in3[i]} for all i=0..N3
  endif)
for N2=0 if not otherwise specified
for N3=0 if not otherwise specified
End

Export
Constraint Distributive
( {value} is add instruction and
  {sum1.value} is first argument of {value} and
  {sum2.value} is second argument of {value} and
  inherits SumChain at {sum1} and
  {product1.value} is the same as {sum1.last_factor} and
  inherits MulChain at {product1} and
  {product1.last_factor} is the same as {product2.last_factor} and
  inherits SumChain at {sum2} and
  {product2.value} is the same as {sum2.last_factor} and
  inherits MulChain at {product2})
End

Constraint SumChain
( {value} is an integer and
  {value} is the same as {results[0]} and
  ( ( {results[i]} is add instruction and
      inherits ArgumentsPermuted with {results[i]}   as {dst}
                                  and {results[i+1]} as {src1}
                                  and {factors[i]}   as {src2} and
      {last_factor} is an integer) or
    ( ( ( {results[i]} is an integer and
          {last_factor} is the same as {factors[i]}) or
        ( {results[i]} is unused and
          {factors[i]} is unused and
          {last_factor} is an integer)) and
      {results[i]} is the same as {factors[i]} and
      {results[i+1]} is unused)) for all i=0..N and
  {factors[N]} is unused)
for N=4 if not otherwise specified
End

Constraint MulChain
( {value} is an integer and
  {value} is the same as {results[0]} and
  ( ( {results[i]} is mul instruction and
      inherits ArgumentsPermuted with {results[i]}   as {dst}
                                  and {results[i+1]} as {src1}
                                  and {factors[i]}   as {src2} and
      {last_factor} is an integer) or
    ( ( ( {results[i]} is an integer and
          {last_factor} is the same as {factors[i]}) or
        ( {results[i]} is unused and
          {factors[i]} is unused and
          {last_factor} is an integer)) and
      {results[i]} is the same as {factors[i]} and
      {results[i+1]} is unused)) for all i=0..N and
  {factors[N]} is unused)
for N=4 if not otherwise specified
End

Export
Constraint HoistSelect
( {select} is select instruction and
  {input1} is second argument of {select} and
  {base} is first argument of {input1} and
  {input2} is third argument of {select} and
  {base} is first argument of {input2} and
  {input1} is gep instruction and
  {input2} is gep instruction)
End

Export
Constraint ForWithIteratorTest
( inherits Loop and
  {comparison} has data flow to {end} and
  {comparison} is icmp instruction and
  {iterator} has data flow to {comparison} and
  {increment} reaches phi node {iterator} from {end} and
  {increment} has data flow to {iterator} and
  {increment} is add instruction and
  {iterator} has data flow to {increment} and
  {iter_end} has data flow to {comparison} and
  inherits LocalConst with {iter_end} as {value}
                       and {begin}    as {scope.begin} and
  {iter_begin} has data flow to {iterator} and
  inherits LocalConst with {iter_begin} as {value}
                       and {begin}      as {scope.begin} and
  {iter_step} has data flow to {increment} and
  inherits LocalConst with {iter_step} as {value}
                       and {begin}     as {scope.begin})
End
